# Need to use the net_mgmt network for acces from the Ansible server
#
- name: add facts from OpenStack discovery
  set_fact:
    ansible_ssh_host: "{{ hostvars[inventory_hostname].openstack.addresses.net_mgmt[0].addr }}"

- name: Display all variables/facts known for a host
  debug: var=hostvars[inventory_hostname] verbosity=4

- name: Wait for port 22 to become open
  local_action: wait_for port=22 host="{{ ansible_ssh_host | default(inventory_hostname) }}" search_regex=OpenSSH delay=10 timeout=1200

- name: Install python and deps for ansible module 1.try
  raw: sudo dnf install -y python2 python2-dnf
  register: task_result
  until: task_result.rc == 0
  retries: 3
  delay: 1
  ignore_errors: yes

- name: Install openvpn
  raw: sudo dnf install -y openvpn
  when: ((id == 3))
  register: task_result
  until: task_result.rc == 0
  retries: 3
  delay: 1
  ignore_errors: yes

- name: Install bird
  raw: sudo dnf install -y bird
  register: task_result
  until: task_result.rc == 0
  retries: 3
  delay: 1
  ignore_errors: yes

- name: Make sure libselinux-python are installed
  dnf: name=libselinux-python state=present
  become: yes
  become_user: root

- name: Gather facts
  setup:  

- stat: path=/home/opnfv
  register: op

- stat: path=/home/nfv
  register: nf

- name: Conditionally put a README in /home/opnfv
  copy: src=README dest=/home/opnfv/README
  when: op.stat.isdir is defined and op.stat.isdir

- name: Put a README in place
  copy: src=README dest=/home/nfv/README
  when: nf.stat.isdir is defined and nf.stat.isdir

- name: Ensures {{openvpn_dir}} dir exists
  file: path={{openvpn_dir}} state=directory
  become: yes
  become_user: root

- name: Copy test openvpn conf while filling in correct remote server
  template: src=client.conf.j2 dest=/etc/openvpn/client.conf
  become: yes
  become_user: root

- name: Test copy key file
  copy: src=static.key dest=/etc/openvpn/static.key
  become: yes
  become_user: root

- name: Copy bird conf for non tunneling nodes while filling in correct network params
  template: src=bird.conf.j2 dest=/etc/bird.conf
  become: yes
  become_user: root
  when: ((id == 1) or (id == 2))

- name: Copy bird conf tunneling node while filling in correct network params
  template: src=birdtunnel.conf.j2 dest=/etc/bird.conf
  become: yes
  become_user: root
  when: ((id == 3))


- name: Let everyone know we are done
  file: path=/home/opnfv/CONFIGURED state=touch owner=opnfv group=opnfv mode=0775
  when: op.stat.isdir is defined and op.stat.isdir

- name: Let everyone know we are done
  file: path=/home/nfv/CONFIGURED state=touch owner=nfv group=nfv mode=0775
  when: nf.stat.isdir is defined and nf.stat.isdir
  become: true

#- name: Let everyone know we are done
#  template: src=CONFIGURED.j2 dest=/home/opnfv/CONFIGURED owner=opnfv group=opnfv mode="u=rw,g=r,o=r"

- name: restart bird service
  command: sudo systemctl restart bird

- name: start vpn client on host with id==3
  command: sudo systemctl restart openvpn@client.service
  when: ( id == 3 )

- name: update forwarding table
  command: "{{item}}"
  with_items:
     - sudo iptables -t nat -I POSTROUTING -o {{tunnel_interface}} -s {{ subnets[vim_id]['VL1']['cidrs'][0] }} -j MASQUERADE
     - sudo iptables -t nat -I POSTROUTING -o {{tunnel_interface}} -s {{ subnets[vim_id]['VL3']['cidrs'][0] }} -j MASQUERADE
     - sudo iptables -t nat -I POSTROUTING -o {{tunnel_interface}} -s {{ tunnel_cidr }} -j MASQUERADE
  when: ( id == 3 )

